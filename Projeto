# Instalar dependências
!pip install pillow cryptography

import hashlib
from PIL import Image
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
import base64

# Geração de chaves de criptografia (global para simplificar)
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
    backend=default_backend()
)
public_key = private_key.public_key()

def embed_text_in_image(image_path, text, output_path):
    image = Image.open(image_path)
    binary_text = ''.join([format(ord(char), '08b') for char in text])
    pixels = list(image.getdata())
    
    new_pixels = []
    idx = 0
    for pixel in pixels:
        if idx < len(binary_text):
            new_pixel = (pixel[0] & ~1 | int(binary_text[idx]), pixel[1], pixel[2])
            idx += 1
        else:
            new_pixel = pixel
        new_pixels.append(new_pixel)
    
    image.putdata(new_pixels)
    image.save(output_path)

def retrieve_text_from_image(image_path):
    image = Image.open(image_path)
    binary_text = ""
    
    for pixel in list(image.getdata()):
        binary_text += str(pixel[0] & 1)
    
    chars = [binary_text[i:i + 8] for i in range(0, len(binary_text), 8)]
    text = ''.join([chr(int(char, 2)) for char in chars if int(char, 2) != 0])
    return text

def generate_image_hash(image_path):
    with open(image_path, "rb") as image_file:
        image_data = image_file.read()
        return hashlib.sha256(image_data).hexdigest()

def encrypt_message(message):
    encrypted = public_key.encrypt(
        message.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return base64.b64encode(encrypted).decode()

def decrypt_message(encrypted_message):
    encrypted_message = base64.b64decode(encrypted_message.encode())
    decrypted = private_key.decrypt(
        encrypted_message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted.decode()

def main():
    while True:
        print("\nMenu de opções:")
        print("(1) Embutir texto em imagem (Steganography)")
        print("(2) Recuperar texto de imagem (Steganography)")
        print("(3) Gerar hash das imagens original e alterada")
        print("(4) Encriptar mensagem (criptografia de chave pública/privada)")
        print("(5) Decriptar mensagem (criptografia de chave pública/privada)")
        print("(S ou s) Sair")
        
        option = input("Escolha uma opção: ")
        
        if option == '1':
            image_path = input("Caminho da imagem original: ")
            text = input("Texto a embutir: ")
            output_path = input("Caminho para salvar a imagem com o texto embutido: ")
            embed_text_in_image(image_path, text, output_path)
            print("Texto embutido com sucesso!")
        
        elif option == '2':
            image_path = input("Caminho da imagem alterada: ")
            text = retrieve_text_from_image(image_path)
            print("Texto recuperado:", text)
        
        elif option == '3':
            original_image_path = input("Caminho da imagem original: ")
            altered_image_path = input("Caminho da imagem alterada: ")
            original_hash = generate_image_hash(original_image_path)
            altered_hash = generate_image_hash(altered_image_path)
            print("Hash da imagem original:", original_hash)
            print("Hash da imagem alterada:", altered_hash)
            print("Imagens diferentes" if original_hash != altered_hash else "Imagens idênticas")
        
        elif option == '4':
            message = input("Mensagem a encriptar: ")
            encrypted_message = encrypt_message(message)
            print("Mensagem encriptada:", encrypted_message)
        
        elif option == '5':
            encrypted_message = input("Mensagem encriptada a decriptar: ")
            try:
                decrypted_message = decrypt_message(encrypted_message)
                print("Mensagem decriptada:", decrypted_message)
            except Exception as e:
                print("Erro na decriptação:", str(e))
        
        elif option.lower() == 's':
            print("Encerrando aplicação.")
            break
        else:
            print("Opção inválida. Tente novamente.")

# Executa o programa
main()
